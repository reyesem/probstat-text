```{r}
#| include: false

# Define default chunk options
knitr::opts_chunk$set(
  fig.path = "./images/",
  out.width = '80%'
)


# Load necessary packages
library(IntroAnalysis)
library(tidyverse)
library(broom)
library(gghighlight)

# Additional Options
options(knitr.kable.NA = '',
        dplyr.show_progress = FALSE,
        contrasts = rep ("contr.treatment", 2))

# Graphic Options
theme_set(theme_bw(12))
theme_update(legend.position = "bottom",
             legend.box = "vertical",
             legend.direction = "horizontal")

# knitr::write_bib(c(.packages(), "bookdown"), "packages.bib")
```


```{r}
#| include: false

# ---- Support Functions

# function: mykable
# description: Create a default version of kbl().
mykable <- function(x, ...) {
  kableExtra::kbl(x, booktabs = TRUE, ...) |>
    kableExtra::kable_styling(
      bootstrap_options = c('striped', 'responsive'),
      latex_options = c('striped'),
      position = 'center'
    )
}


# function: get_block
# description: Extract fenced blocks from a QMD document matching some pattern.
repeat_block <- function(x, pattern) {
  # find start lines
  startind <- x |>
    str_detect(pattern = pattern) |>
    which()
  
  # find all fenced blocks
  allind <- x |>
    str_detect(fixed(':::')) |>
    which()
  
  # find end of each block
  endind <- allind[(is.element(allind, startind) |> which()) + 1]
  
  map2(startind, endind, ~ x[.x:.y])
}


# function: trim_vector
# description: Remove empty elements from beginning and end of a vector.
trim_vector <- function(x, side = c('both', 'left', 'right')) {
  if ((side == 'left') || (side == 'both')) {
    x <- x[c((which(str_detect(x, '[[:graph:]]'))[1]):(length(x)))]
  }
  
  if ((side == 'right') || (side == 'both')) {
    x <- x[c(1L:(rev(which(str_detect(x, '[[:graph:]]')))[1]))]
  }
  
  return(x)
}



# function: get_terms
# description: Given a list of fenced blocks, extract terms.
get_terms <- function(x, term = c('reference', 'title', 'text', 'fullblock')) {
  if (term == 'reference') {
    map_chr(x, ~ .x |>
              str_subset(pattern = ':::\\{#') |>
              str_remove_all(pattern = '(:::\\{#)|(\\})'))
  } else if (term == 'title') {
    map_chr(x, ~ .x |> 
              str_subset(pattern = '##') |> 
              str_remove(pattern = '##') |>
              str_trim())
  } else if (term == 'text') {
    map_chr(x, ~ .x |>
            str_subset(pattern = '(:::)|(##)', negate = TRUE) |>
            trim_vector(side = 'both') |>
            str_c(collapse = '\n'))
    
    
  } else if (term == 'fullblock') {
    map_chr(x, ~ .x |>
              str_subset(pattern = ':::', negate = TRUE) |>
              str_c(collapse = '\n'))
  }
}
```

```{r}
#| echo: false
#| output: asis

reyesr::print_latex_commands()
```

